{"version":3,"sources":["components/item-input.tsx","components/back-to-item-entry.tsx","stages/redirect-if-no-items.tsx","stages/algorithm-select.tsx","stages/home.tsx","stages/item-entry.tsx","stages/results.tsx","components/option-prompt-buttons.tsx","components/progress-bar.tsx","types.ts","sorters/sorter.ts","sorters/binary-insertion-sort.ts","sorters/insertion-sort.ts","sorters/quicksort.ts","stages/sort.tsx","stages/index.tsx","App.tsx","serviceWorker.ts","index.tsx","context.ts"],"names":["itemRegex","ItemInput","inputRef","React","createRef","context","state","text","saved","error","autosize","canResize","saveTimeout","this","setState","stringifyItems","validate","input","current","offset","offsetHeight","clientHeight","setImmediate","style","height","scrollHeight","window","ResizeObserver","observer","disconnect","observe","value","split","filter","i","trim","length","map","line","exec","required","weight","parseInt","undefined","clearTimeout","items","updateItems","parseItems","j","event","target","nextState","setTimeout","props","onChange","join","messageStyle","color","onBlur","bind","ref","className","minHeight","resize","PureComponent","contextType","Context","BackToItemEntry","to","classnames","icon","faAngleLeft","RedirectIfNoItems","children","AlgorithmSelect","algorithm","setAlgorithm","AlgCard","alg","url","name","pros","cons","inverse","Card","CardHeader","CardTitle","CardBody","key","onClick","onSelection","faAngleRight","size","CardDeck","Algorithm","quicksort","binaryInsertion","insertionSort","Home","marginTop","marginBottom","compressor","minFontSize","href","DataEntry","hasItems","e","l","onInputChange","Button","disabled","id","Results","ListGroup","item","ListGroupItem","OptionPromptButtons","prompt","resolve","opt1","item1","opt2","item2","opt3","item3","OptBtn","opt","Col","xs","md","lg","fontSize","Row","ProgressBar","max","progress","isNumberProps","p","Progress","striped","itemsEqual","left","right","Sorter","triggerPrompt","updateProgress","Promise","res","BinaryInsertionSort","curItem","curIdx","splice","binarySearch","idx","min","Math","floor","sortedItem","createPrompt","promise","InsertionSort","swap","Quicksort","Array","fill","qs","low","high","partition","pIdx","pivots","slice","mid","indexOf","console","warn","pivot","Sort","finished","promptCount","sorter","algorithmName","triggerPromptUser","onKeyPress","run","then","addEventListener","removeEventListener","isArray","i3","cancel","Stages","exact","path","App","getItemsFromStorage","data","localStorage","getItem","StorageKeys","JSON","parse","setItem","stringify","Provider","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","createContext"],"mappings":"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","file":"static/js/main.8fe7d68e.chunk.js","sourcesContent":["import React, { ChangeEvent, PureComponent } from 'react';\nimport Context from '../context';\nimport { Item } from '../types';\n\nconst itemRegex = /^\\s*(\\*)?\\s*(.+?)\\s*(?:\\|\\s*(\\d+))?\\s*$/;\n\ninterface Props {\n  onChange?: React.TextareaHTMLAttributes<HTMLTextAreaElement>['onChange'];\n}\n\ninterface State {\n  text: string;\n  saved: boolean;\n  error: string | null;\n  autosize: boolean;\n  canResize: boolean;\n}\n\ndeclare global {\n  interface Window {\n    ResizeObserver: ResizeObserver;\n  }\n}\n\nexport default class ItemInput extends PureComponent<Props, State> {\n  private inputRef = React.createRef<HTMLTextAreaElement>();\n  context!: React.ContextType<typeof Context>;\n  state: State = {\n    text: '',\n    saved: false,\n    error: null,\n    autosize: true,\n    canResize: true,\n  };\n\n  private saveTimeout = -1;\n\n  componentDidMount() {\n    this.setState({ text: this.stringifyItems() });\n    this.validate();\n    const input = this.inputRef.current!,\n      offset = input.offsetHeight - input.clientHeight;\n    setImmediate(() => input.style.height = input.scrollHeight + offset + 'px');\n\n    if (window.ResizeObserver) {\n      const observer = new ResizeObserver(() => {\n        this.setState({ autosize: false });\n        observer.disconnect();\n      });\n\n      observer.observe(input);\n    } else {\n      this.setState({ canResize: false });\n    }\n  }\n\n  private parseItems(): Item[] {\n    if (!this.inputRef.current) {\n      return [];\n    }\n\n    return this.inputRef.current.value\n      .split('\\n')\n      .filter(i => i.trim().length)\n      .map(line => {\n        const [_, required, text, weight] = itemRegex.exec(line)!;\n        return {\n          text,\n          weight: !weight ? undefined : parseInt(weight),\n          required: required !== undefined ? !!required : undefined\n        };\n      });\n  }\n\n  private updateItems(): void {\n    clearTimeout(this.saveTimeout);\n    const items = this.validate();\n    if (items) {\n      this.context.updateItems(items);\n      this.setState({ saved: true, error: null });\n    }\n  }\n\n  private validate(): Item[] | null {\n    const items = this.parseItems();\n    for (let i = 0; i < items.length - 1; i++) {\n      for (let j = i + 1; j < items.length; j++) {\n        if (items[i].text === items[j].text) {\n          this.setState({\n            saved: false,\n            error: `Duplicate item: ${items[i].text}`,\n          });\n          return null;\n        }\n      }\n    }\n\n    return items;\n  }\n\n  private onChange(event: ChangeEvent<HTMLTextAreaElement>): void {\n    clearTimeout(this.saveTimeout);\n    const input = event.target,\n      items = this.validate(),\n      nextState: Partial<State> = {\n        text: input.value,\n      };\n\n    if (items) {\n      this.saveTimeout = window.setTimeout(() => this.updateItems(), 3000);\n      nextState.saved = false;\n      nextState.error = null;\n    }\n\n    this.setState(nextState as State);\n\n    if (this.state.autosize) {\n      const offset = input.offsetHeight - input.clientHeight;\n      input.style.height = 'auto'; // allow resizing to be smaller\n      input.style.height = input.scrollHeight + offset + 'px';\n    }\n\n    this.props.onChange && this.props.onChange(event);\n  }\n\n  private stringifyItems(): string {\n    if (!this.context || !this.context.items) {\n      return '';\n    }\n\n    return this.context.items\n      .map(i => {\n        let text = i.required ? '* ' : '';\n        text += i.text;\n        if (i.weight) {\n          text += ' | ' + i.weight;\n        }\n\n        return text;\n      }).join('\\n');\n  }\n\n  render() {\n    const {\n        saved,\n        error,\n        canResize,\n      } = this.state,\n      messageStyle = {\n        height: 0,\n        color:\n          saved ? 'green' :\n          error ? 'red' :\n          'inherit'\n      };\n\n    return <>\n      <textarea value={this.state.text} onBlur={this.updateItems.bind(this)} ref={this.inputRef}\n        onChange={this.onChange.bind(this)} className=\"form-control\"\n        style={{ minHeight: '25vh', resize: canResize ? 'vertical' : 'none' }} />\n      <div className=\"mt-1\" style={messageStyle}>{saved ? `Items saved` : error}</div>\n    </>;\n  }\n\n  static contextType = Context;\n}","import React, { AnchorHTMLAttributes, FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleLeft } from '@fortawesome/free-solid-svg-icons';\nimport classnames from 'classnames';\n\nconst BackToItemEntry: FC<AnchorHTMLAttributes<HTMLAnchorElement>> = ({ className, ...props }) =>\n  <Link to=\"/data-entry\" className={classnames('btn btn-secondary', className)} {...props}>\n    <FontAwesomeIcon icon={faAngleLeft} /> Back to Item Entry\n  </Link>\n\nexport default BackToItemEntry;","import React, { PureComponent } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Context from '../context';\n\nexport default class RedirectIfNoItems extends PureComponent {\n  context!: CT;\n\n  render() {\n    if (this.context.items.length < 3) {\n      return <Redirect to=\"/data-entry\" />\n    }\n\n    return <>{this.props.children}</>;\n  }\n\n  static contextType = Context;\n}","import React, { FC, PureComponent, ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\nimport ReactifyMarkdown from 'reactify-markdown';\nimport { Card, CardBody, CardDeck, CardHeader, CardTitle } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleRight } from '@fortawesome/free-solid-svg-icons';\nimport BackToItemEntry from '../components/back-to-item-entry';\nimport Context, { Algorithm } from '../context';\nimport './algorithm-select.scss';\nimport RedirectIfNoItems from './redirect-if-no-items';\n\nexport default class AlgorithmSelect extends PureComponent {\n  context!: CT;\n\n  onSelection(algorithm: Algorithm) {\n    this.context.setAlgorithm(algorithm);\n  }\n\n  render() {\n    const AlgCard: FC<{\n      algorithm: Algorithm,\n      url: string,\n      name: string,\n      pros: ReactNode[],\n      cons: ReactNode[],\n      color?: string,\n      inverse?: boolean,\n    }> =\n      ({ algorithm: alg, url, name, pros, cons, color, inverse }) =>\n        <Card color={color || 'light'} inverse={inverse}>\n          <CardHeader><CardTitle><h4>{name}</h4></CardTitle></CardHeader>\n          <CardBody className=\"d-flex flex-column\">\n            Pros:\n            <ul>\n              {pros.map((text, i) => <li key={i}>{text}</li>)}\n            </ul>\n            Cons:\n            <ul>\n              {cons.map((text, i) => <li key={i}>{text}</li>)}\n            </ul>\n            <div className=\"text-center mt-auto\">\n              <Link to={`/sort/${url}`} onClick={this.onSelection.bind(this, alg)} className=\"btn btn-primary btn-lg\">\n                Select <FontAwesomeIcon icon={faAngleRight} size=\"lg\" />\n              </Link>\n            </div>\n          </CardBody>\n        </Card>;\n\n    return <RedirectIfNoItems>\n      <ReactifyMarkdown>{`\n        Select Algorithm\n        ================\n\n        Here you select which method we'll use for sorting your list.  Ultimately, all three methods will produce the\n        same results.  The difference is only in how long the \"quiz\" will be.\n      `}</ReactifyMarkdown>\n      <CardDeck className=\"my-auto\">\n        <AlgCard\n          algorithm={Algorithm.quicksort}\n          url=\"quicksort\"\n          name=\"Quicksort\"\n          pros={[\n            'Fewer context switches--questions are faster to answer',\n            // 'Can stop early if you specify a maximum number of items',\n          ]}\n          cons={[\n            'Slightly more questions than Binary Insertion Sort',\n            <><b>Longest possible</b> quiz if list is already mostly sorted</>,\n          ]}\n         />\n        <div className=\"w-100 d-lg-none\" />\n        <AlgCard\n          algorithm={Algorithm.binaryInsertion}\n          url=\"binary-insertion-sort\"\n          name=\"Binary Insertion Sort\"\n          pros={[\n            'Fewest questions for well-shuffled lists',\n            'Roughly the same number of questions no matter how sorted or unsorted the list is',\n          ]}\n          cons={[\n            'More context switches--questions are a little slower to answer',\n            // <><b>Cannot</b> stop early if you specify a maximum number of items</>,\n          ]}\n         />\n        <div className=\"w-100 d-xl-none\" />\n        <div className=\"w-100 d-lg-none\" />\n        <AlgCard\n          algorithm={Algorithm.insertionSort}\n          url=\"insertion-sort\"\n          name=\"Insertion Sort\"\n          color=\"secondary\"\n          inverse\n          pros={[\n            <><b>Fewest questions by far</b> for mostly-ordered lists</>,\n            'Fewer context switches than Binary Insertion Sort--questions are quicker to answer',\n            // 'Can stop early if you specify a maximum number of items',\n          ]}\n          cons={[\n            'More context switches than Quicksort--questions are slower to answer',\n            <>\n              <b>Significantly</b> more questions than Binary Insertion Sort or Quicksort if list is not already mostly\n              ordered\n            </>,\n          ]}\n         />\n        <div className=\"w-50 d-none d-lg-flex d-xl-none\" />\n      </CardDeck>\n\n      <BackToItemEntry className=\"mb-3\" />\n\n      <ReactifyMarkdown>{`\n        #### Information ####\n\n        If your list is more or less ordered already, such as when you sort it and then go back to add a couple items,\n        select *Insertion Sort*.  If the list is already completely sorted, [Insertion Sort](https://en.wikipedia.org/wiki/Insertion_sort)\n        will have the absolute minimum number of questions (\\`number of items - 1\\`).\n\n        If your list is not sorted, choose either *Quicksort* or *Binary Insertion Sort*.  Both sorting methods take\n        about the same amount of time.  If you're good at switching contexts in your head, choose\n        [Binary Insertion Sort](https://en.wikipedia.org/wiki/Insertion_sort#Variants), otherwise, choose [Quicksort](https://en.wikipedia.org/wiki/Quicksort).\n\n        Your list will be reordered as you answer questions, so if you need to return to item entry in the middle of the\n        quiz, you will not lose your progress.\n      `}</ReactifyMarkdown>\n    </RedirectIfNoItems>;\n  }\n\n  static contextType = Context;\n}","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleRight } from '@fortawesome/free-solid-svg-icons';\nimport ReactFitText from '@kennethormandy/react-fittext';\n\nconst Home: FC = () =>\n  <div className=\"d-flex flex-column w-100 h-100\">\n    <div className=\"w-100 text-center\" style={{ marginTop: '20%', marginBottom: '20%' }}>\n      <ReactFitText compressor={.745} minFontSize={65}>Subjective Sorter</ReactFitText>\n    </div>\n    <p>\n      Sometimes it is helpful to order things from most important to least important.  For example, maybe you need to\n      figure out who to invite to your wedding, and you can only invite so many people.  Or maybe you want to determine\n      what your <a href=\"https://dfdx.us/core-values-quiz\">core values</a> are.  Maybe you just need to figure out who\n      your favorite Backstreet Boy is, idk!\n    </p>\n    <p>\n      The Subjective Sorter allows you to efficiently order your list of items given subjective criteria.  Input your\n      data and the tool will generate a \"quiz\", presenting you with two options per question.  Choose which is the more\n      important option, and the tool will handle the rest.\n    </p>\n    <Link to=\"/item-entry\" className=\"align-self-end btn btn-primary btn-lg mt-auto\">\n      Get Started <FontAwesomeIcon icon={faAngleRight} size=\"lg\" />\n    </Link>\n  </div>;\n\nexport default Home;","import React, { ChangeEvent, PureComponent } from 'react';\nimport { Link } from 'react-router-dom';\nimport ReactifyMarkdown from 'reactify-markdown';\nimport { Button, Card, CardBody, CardDeck, CardHeader, CardTitle } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleRight } from '@fortawesome/free-solid-svg-icons';\nimport ItemInput from '../components/item-input';\nimport Context from '../context';\nimport './item-entry.scss';\n\ninterface State {\n  hasItems: boolean;\n}\n\nexport default class DataEntry extends PureComponent<{}, State> {\n  context!: CT;\n  state = { hasItems: false };\n\n  componentDidMount() {\n    this.setState({ hasItems: this.context.items.length > 2 });\n  }\n\n  onInputChange(e: ChangeEvent<HTMLTextAreaElement>) {\n    this.setState({ hasItems: e.target.value.split('\\n').filter(l => l.trim().length).length > 2 });\n  }\n\n  render() {\n    return <>\n      <h1 className=\"display-1\">Item Entry</h1>\n      <ReactifyMarkdown>{`\n        Enter the items you wish to sort.  Each line represents one item.\n\n        If an item is *required*, prepend a \\`*\\` to it.  If a line represents multiple items (i.e. has a *weight*)\n        append \\`| <weight>\\` to it, where \\`<weight>\\` is the number of items the line represents.  See the examples\n        below for more details.\n\n        Your entries will be saved automatically.\n      `}</ReactifyMarkdown>\n      <ItemInput onChange={this.onInputChange.bind(this)} />\n      <div className=\"d-flex flex-row justify-content-end my-2\">\n        <Link to=\"/algorithm\">\n          <Button color=\"primary\" disabled={!this.state.hasItems} className=\"ml-auto\" size=\"lg\">\n            Sort Entries <FontAwesomeIcon icon={faAngleRight} size=\"lg\" />\n          </Button>\n        </Link>\n      </div>\n      <CardDeck className=\"mt-1\">\n        <Card color=\"light\" id=\"examples\">\n          <CardHeader><CardTitle><h3>Examples</h3></CardTitle></CardHeader>\n          <CardBody>\n            <ReactifyMarkdown>{`\n              **Single entries**\n              \\`\\`\\`\n              Anna\n              Bob\n              \\`\\`\\`\n\n              **Required single entries**\n              \\`\\`\\`\n              * Candice\n              * Derek\n              \\`\\`\\`\n\n              **Weighted entries**\n              \\`\\`\\`\n              The Smiths | 4\n              Edna + 1 | 2\n              \\`\\`\\`\n\n              **Required weighted entries**\n              \\`\\`\\`\n              * The Jones | 3\n              * Fred and Gwen + 1 | 3\n              \\`\\`\\`\n            `}</ReactifyMarkdown>\n          </CardBody>\n        </Card>\n        <div className=\"w-100 d-md-none\" />\n        <Card color=\"light\">\n          <CardHeader><CardTitle><h3>Tips</h3></CardTitle></CardHeader>\n          <CardBody>\n            <ReactifyMarkdown>{`\n              Entries marked required will not require any questions on the quiz.  This will *dramatically* reduce the\n              length of the quiz.\n\n              Required items are not ordered amongst other required items.\n\n              If you have already sorted your list and add new items, don't add them to the start; add them \"near\"\n              where they need to be or to the end of the list.  Then select *Insertion Sort* on the next step.\n            `}</ReactifyMarkdown>\n          </CardBody>\n        </Card>\n      </CardDeck>\n    </>;\n  }\n\n  static contextType = Context;\n}","import React, { ContextType, PureComponent } from 'react';\nimport { ListGroup, ListGroupItem } from 'reactstrap';\nimport BackToItemEntry from '../components/back-to-item-entry';\nimport Context from '../context';\nimport RedirectIfNoItems from './redirect-if-no-items';\n\nexport default class Results extends PureComponent {\n  context!: ContextType<typeof Context>;\n\n  render() {\n    return <RedirectIfNoItems>\n      <h1 className=\"display-1\">Results</h1>\n      <ListGroup>\n        {this.context.items.map((item, i) =>\n          <ListGroupItem key={item.text}>{item.text}</ListGroupItem>)\n        }\n      </ListGroup>\n      <BackToItemEntry className=\"mt-3\" />\n    </RedirectIfNoItems>;\n  }\n\n  static contextType = Context;\n}","import React, { FC } from 'react';\nimport { Button, Col, Row } from 'reactstrap';\nimport { Item, Prompt } from '../types';\n\nconst OptionPromptButtons: FC<{ prompt: Prompt }> = ({ prompt }) => {\n    const {\n      resolve,\n      item1: opt1,\n      item2: opt2,\n      item3: opt3,\n    } = prompt;\n\n    const OptBtn: FC<{ opt: Item }> = ({ opt }) =>\n      <Col xs={12} md={opt3 ? 12 : 6} lg={opt3 ? 4 : 6} className=\"align-self-stretch mb-2\">\n        <Button onClick={() => resolve(opt)} className=\"w-100 border h-100\" color=\"light\"\n            style={{minHeight: 100, fontSize: 40}}>\n          {opt.text}\n        </Button>\n      </Col>;\n\n    return <Row className=\"align-items-stretch\">\n      <OptBtn opt={opt1} />\n      <OptBtn opt={opt2} />\n      {opt3 && <OptBtn opt={opt3} />}\n    </Row>;\n}\n\nexport default OptionPromptButtons;","import React, { FC, PureComponent } from 'react';\nimport { Progress } from 'reactstrap';\nimport { Item } from '../types';\n\ninterface ItemProps {\n  progress: (Item | false)[];\n}\n\ninterface NumberProps {\n  progress: number;\n  max: number;\n}\n\nfunction isNumberProps(props: ItemProps | NumberProps): props is NumberProps {\n  return typeof props.progress === 'number';\n}\n\nconst ProgressBar: FC<ItemProps | NumberProps> = (props) => {\n  let value: number,\n    max: number;\n\n  if (isNumberProps(props)) {\n    value = props.progress;\n    max = props.max;\n  } else {\n    value = props.progress.filter(p => p !== false).length;\n    max = props.progress.length;\n  }\n\n  return <Progress value={value} striped max={max} />;\n}\n\nexport default ProgressBar;","import Context from './context';\n\nexport {};\n\ndeclare global {\n  type CT = React.ContextType<typeof Context>;\n}\n\nexport interface Item {\n  text: string;\n  weight?: number;\n  required?: boolean;\n}\n\nexport interface Prompt {\n  resolve: (item: Item) => void,\n  item1: Item;\n  item2: Item;\n  item3?: Item;\n}\n\nexport function itemsEqual(left: Item | null | undefined, right: Item | null | undefined) {\n  if ((left === null || right === null || left === undefined || right === undefined)) {\n    return left === right;\n  }\n\n  return left.text === right.text && left.required === right.required && left.weight === right.weight;\n}","import { Item, Prompt } from '../types';\n\nexport type TriggerPrompt = (prompt: Prompt) => void;\nexport type Progress<T extends number | Item> = T extends number ? T : (T | false)[];\nexport type UpdateProgress<T extends number | Item> = (progress: Progress<T>) => void;\n\nexport default abstract class Sorter<TProgress extends Item | number> {\n  constructor(\n    public items: Item[],\n    protected triggerPrompt: TriggerPrompt,\n    protected progress: Progress<TProgress>,\n    protected updateProgress?: UpdateProgress<TProgress>)\n  {\n  }\n\n  abstract async run(): Promise<void>;\n\n  abstract cancel(): void;\n\n  protected swap(i: number, j: number): void {\n    [this.items[i], this.items[j]] = [this.items[j], this.items[i]];\n  }\n\n  static createPrompt(item1: Item, item2: Item, item3?: Item): [Promise<Item>, Prompt] {\n    const prompt = <Partial<Prompt>>{\n        item1,\n        item2,\n        item3\n      },\n      promise = new Promise<Item>(res => prompt.resolve = res);\n\n    return [promise, <Prompt>prompt];\n  }\n}","import { Item, itemsEqual } from '../types';\nimport Sorter, { TriggerPrompt, UpdateProgress } from './sorter';\n\nexport default class BinaryInsertionSort extends Sorter<number> {\n  constructor(items: Item[], triggerPrompt: TriggerPrompt, updateProgress?: UpdateProgress<number>) {\n    super(items, triggerPrompt, 1, updateProgress);\n  }\n\n  private curItem: Item | null = null;\n  private curIdx: number = -1;\n\n  async run() {\n    const items = this.items;\n    for (let i = 1; i < items.length; i++) {\n      if (this.updateProgress) {\n        this.updateProgress(this.progress);\n      }\n\n      this.curIdx = i;\n      const item = this.curItem = items.splice(i, 1)[0],\n        idx = await this.binarySearch(item, 0, i);\n\n      items.splice(idx, 0, item);\n      this.progress = i;\n    }\n  }\n\n  cancel() {\n    if (this.curItem) {\n      this.items.splice(this.curIdx, 0, this.curItem);\n    }\n  }\n\n  async binarySearch(item: Item, min: number, max: number): Promise<number> {\n    if (min >= max) {\n      return min;\n    }\n\n    const idx = Math.floor((max - min) / 2 + min),\n      sortedItem = this.items[idx];\n\n    if (item.required) {\n      if (!sortedItem.required) {\n        return this.binarySearch(item, min, idx);\n      } else {\n        return idx;\n      }\n    } else if (sortedItem.required) {\n      return this.binarySearch(item, idx + 1, max);\n    }\n\n    const [promise, prompt] = Sorter.createPrompt(item, sortedItem);\n    this.triggerPrompt(prompt);\n    const result = await promise;\n\n    if (itemsEqual(result, item)) {\n      return this.binarySearch(item, min, idx);\n    } else {\n      return this.binarySearch(item, idx + 1, max);\n    }\n  }\n}","import { Item, itemsEqual } from '../types';\nimport Sorter, { TriggerPrompt, UpdateProgress } from './sorter';\n\nexport default class InsertionSort extends Sorter<number> {\n  constructor(items: Item[], triggerPrompt: TriggerPrompt, updateProgress?: UpdateProgress<number>) {\n    super(items, triggerPrompt, 1, updateProgress);\n  }\n\n  async run() {\n    const items = this.items;\n    for (let i = 1; i < items.length; i++) {\n      if (this.updateProgress) {\n        this.updateProgress(this.progress);\n      }\n\n      const item = items[i];\n\n      let j = i - 1;\n      for (; j >= 0; j--) {\n        const sortedItem = items[j];\n\n        if (item.required) {\n          if (!sortedItem.required) {\n            this.swap(j + 1, j);\n            continue;\n          } else {\n            break;\n          }\n        } else if (sortedItem.required) {\n          break;\n        }\n\n        const [promise, prompt] = Sorter.createPrompt(item, sortedItem);\n        this.triggerPrompt(prompt);\n        const result = await promise;\n\n        if (itemsEqual(result, item)) {\n          this.swap(j + 1, j);\n        } else {\n          break;\n        }\n      }\n\n      this.progress = i + 1;\n    }\n  }\n\n  cancel() {\n    // pass\n  }\n}","import { Item, itemsEqual } from '../types';\nimport Sorter, { TriggerPrompt, UpdateProgress } from './sorter';\n\nexport default class Quicksort extends Sorter<Item> {\n  constructor(items: Item[], triggerPrompt: TriggerPrompt, updateProgress?: UpdateProgress<Item>) {\n    super(items, triggerPrompt, new Array(items.length).fill(false), updateProgress);\n  }\n\n  async run() {\n    if (this.updateProgress) {\n      this.updateProgress(this.progress);\n    }\n\n    return this.qs(0, this.items.length - 1);\n  }\n\n  cancel() {\n    // pass\n  }\n\n  private async qs(low: number, high: number): Promise<void> {\n    if (low < high) {\n      const pIdx = await this.partition(low, high);\n      this.progress[pIdx] = this.items[pIdx];\n      if (this.updateProgress) {\n        this.updateProgress(this.progress);\n      }\n\n      await this.qs(low, pIdx - 1);\n      await this.qs(pIdx + 1, high);\n    }\n  }\n\n  private async partition(low: number, high: number): Promise<number> {\n    if (high - low > 5) {\n      // find middle pivot\n      const pivots = this.items.slice(high - 3).filter(i => !i.required);\n\n      if (pivots.length > 1) {\n        const [promise, prompt] = Sorter.createPrompt(...pivots as [Item, Item, Item?]);\n        this.triggerPrompt(prompt);\n        const mid = await promise,\n          idx = this.items.indexOf(mid);\n\n        // idx should never be -1, but just in case\n        if (idx === -1) {\n          console.warn(`Did not find item ${mid.text}`);\n        } else {\n          this.swap(idx, high);\n        }\n      }\n    }\n\n    const pivot = this.items[high];\n    if (pivot.required) {\n      this.swap(low, high);\n      return low;\n    }\n\n    let i = low;\n    for (let j = low; j < high; j++) {\n      const item = this.items[j];\n\n      if (item.required && !pivot.required) {\n        this.swap(i, j);\n        i++;\n        continue;\n      }\n\n      const [promise, prompt] = Sorter.createPrompt(pivot, item)\n      this.triggerPrompt(prompt);\n      const result = await promise;\n\n      if (itemsEqual(result, item)) {\n        this.swap(i, j);\n        i++;\n      }\n    }\n\n    this.swap(i, high);\n    return i;\n  }\n}","import React, { PureComponent } from 'react';\nimport { Redirect } from 'react-router';\nimport BackToItemEntry from '../components/back-to-item-entry';\nimport OptionPromptButtons from '../components/option-prompt-buttons';\nimport ProgressBar from '../components/progress-bar';\nimport Context, { Algorithm } from '../context';\nimport BinaryInsertionSort from '../sorters/binary-insertion-sort';\nimport InsertionSort from '../sorters/insertion-sort';\nimport Quicksort from '../sorters/quicksort';\nimport Sorter, { Progress } from '../sorters/sorter';\nimport { Item, Prompt } from '../types';\nimport RedirectIfNoItems from './redirect-if-no-items';\n\ninterface State {\n  prompt?: Prompt;\n  finished: boolean;\n  promptCount: number;\n  progress: Progress<Item | number>;\n}\n\nexport default class Sort extends PureComponent<{}, State> {\n  constructor(props: {}) {\n    super(props);\n\n    this.triggerPromptUser = this.triggerPromptUser.bind(this);\n    this.updateProgress = this.updateProgress.bind(this);\n    this.onKeyPress = this.onKeyPress.bind(this);\n  }\n\n  context!: CT;\n\n  state: State = {\n    finished: false,\n    promptCount: 0,\n    progress: 0,\n  };\n\n  sorter!: Sorter<any>;\n  algorithmName!: string;\n\n  async componentDidMount() {\n    const {\n      algorithm,\n      items\n    } = this.context;\n\n    switch (algorithm) {\n      case Algorithm.quicksort:\n        this.sorter = new Quicksort(items, this.triggerPromptUser, this.updateProgress);\n        this.algorithmName = 'Quicksort';\n        break;\n\n      case Algorithm.binaryInsertion:\n        this.sorter = new BinaryInsertionSort(items, this.triggerPromptUser, this.updateProgress);\n        this.algorithmName = 'Binary Insertion Sort';\n        break;\n\n      case Algorithm.insertionSort:\n        this.sorter = new InsertionSort(items, this.triggerPromptUser, this.updateProgress);\n        this.algorithmName = 'Insertion Sort';\n        break;\n    }\n\n    if (this.sorter) {\n      this.sorter.run().then(() => this.setState({ finished: true, prompt: undefined }));\n    }\n\n    window.addEventListener('keypress', this.onKeyPress);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keypress', this.onKeyPress);\n  }\n\n  private updateProgress(progress: Progress<number | Item>): void {\n    if (Array.isArray(progress)) {\n      this.setState({ progress: progress.slice() });\n    } else {\n      this.setState({ progress });\n    }\n  }\n\n  private triggerPromptUser(prompt: Prompt) {\n    this.setState({\n      prompt,\n      promptCount: this.state.promptCount + 1,\n    });\n\n    this.context.updateItems(this.context.items);\n  }\n\n  private onKeyPress(e: KeyboardEvent) {\n    const prompt = this.state.prompt;\n    if (!prompt) {\n      return;\n    }\n\n    switch (e.key) {\n      case 'a':\n        prompt.resolve(prompt.item1);\n        break;\n\n      case 'h':\n        if (!prompt.item3) {\n          break;\n        }\n\n        prompt.resolve(prompt.item2);\n        break;\n\n      case 'l':\n        if (prompt.item3) {\n          prompt.resolve(prompt.item3);\n          break;\n        }\n\n        prompt.resolve(prompt.item2);\n        break;\n    }\n  }\n\n  render() {\n    if (!this.context.algorithm) {\n      return <Redirect to=\"/algorithm\" />;\n    }\n\n    if (this.state.finished) {\n      return <Redirect to=\"/results\" />;\n    }\n\n    if (!this.state.prompt) {\n      return <div />;\n    }\n\n    const i3 = this.state.prompt.item3;\n\n    return <RedirectIfNoItems>\n      <h1 className=\"display-1\">Sort</h1>\n      <h4>{this.algorithmName}</h4>\n      <div className=\"d-flex flex-column\">\n        <h2 className=\"text-center mb-3 mt-4\">\n          {\n            i3 ?\n              <>Which item is the <b className=\"text-primary\"><i>second</i></b> most important?</> :\n              <>Which item is <span className=\"text-primary\">more important</span>?</>\n          }\n        </h2>\n        <h4>Question #{this.state.promptCount}</h4>\n        <OptionPromptButtons prompt={this.state.prompt} />\n        {\n          this.sorter instanceof Quicksort ?\n            <ProgressBar progress={this.state.progress as Progress<Item>} /> :\n            <ProgressBar progress={this.state.progress as number} max={this.context.items.length} />\n        }\n        {\n          i3 && <span className=\"text-info mt-2\">\n            This question has no bearing on the final result, but answering it correctly can reduce the length of the\n            quiz by up to 15% or more on your car insurance.  For real, though, it'll cut out a good 5-15% of the\n            questions.\n          </span>\n        }\n        <span className=\"mt-2 d-none d-sm-inline\">\n          <b>Tip:</b>{' '}\n          {\n            i3 ?\n              <>\n                You can press <kbd>a</kbd> to select the left item, <kbd>h</kbd> to select the middle item, and{' '}\n                <kbd>l</kbd> to select the right item.\n              </> :\n              <>\n                You can press <kbd>a</kbd> to select the left item and <kbd>l</kbd> to select the right item.\n              </>\n          }\n        </span>\n        <BackToItemEntry className=\"align-self-start mt-3\" onClick={() => this.sorter.cancel()} />\n      </div>\n    </RedirectIfNoItems>;\n  }\n\n  static contextType = Context;\n}","import React, { FC } from 'react';\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport AlgorithmSelect from './algorithm-select';\nimport Home from './home';\nimport ItemEntry from './item-entry';\nimport Results from './results';\nimport Sort from './sort';\n\nconst Stages: FC = () =>\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/\"><Home /></Route>\n      <Route path=\"/item-entry\"><ItemEntry /></Route>\n      <Route path=\"/algorithm\"><AlgorithmSelect /></Route>\n      <Route path=\"/sort\"><Sort /></Route>\n      <Route path=\"/results\"><Results /></Route>\n      <Route path=\"*\"><Redirect to=\"/item-entry\" /></Route>\n    </Switch>\n  </HashRouter>;\n\nexport default Stages;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.scss';\nimport Context, { Algorithm, AppContext, StorageKeys } from './context';\nimport Stages from './stages';\nimport { Item } from './types';\n\ninterface State extends AppContext {}\n\nclass App extends React.PureComponent<{}, State> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      items: this.getItemsFromStorage(),\n      updateItems: this.updateItems.bind(this),\n      algorithm: null,\n      setAlgorithm: this.setAlgorithm.bind(this),\n    };\n  }\n\n  private getItemsFromStorage(): Item[] {\n    const data = localStorage.getItem(StorageKeys.items);\n    if (!data) {\n      return [];\n    }\n\n    return JSON.parse(data);\n  }\n\n  private updateItems(items: Item[]) {\n    localStorage.setItem(StorageKeys.items, JSON.stringify(items));\n    this.setState({ items });\n  }\n\n  private setAlgorithm(algorithm: Algorithm | null) {\n    this.setState({ algorithm });\n  }\n\n  render() {\n    return (\n      <div className=\"App container pt-2 pb-3\">\n        <Context.Provider value={this.state}>\n          <Stages />\n        </Context.Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport './types';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Item } from './types';\n\nexport enum StorageKeys {\n  items = 'items',\n}\n\nexport enum Algorithm {\n  quicksort = 'qs',\n  binaryInsertion = 'binIns',\n  insertionSort = 'ins'\n}\n\nexport interface AppContext {\n  items: Item[];\n  updateItems(items: Item[]): void;\n\n  algorithm: Algorithm | null;\n  setAlgorithm(algoirthm: Algorithm | null): void;\n}\n\nconst Context = React.createContext<AppContext>({\n  items: [],\n  updateItems: () => {},\n  algorithm: null,\n  setAlgorithm: () => {},\n});\n\nexport default Context;"],"sourceRoot":""}